{"version":3,"file":"BooleanSwitch.abdebb4d.js","sources":["../../src/composables/componentId.ts","../../src/components/UI/symbols.ts","../../src/components/UI/Radio/Radio.vue","../../src/components/UI/RadioGroup/RadioGroup.vue","../../src/components/PropControls/BooleanSwitch/BooleanSwitch.vue"],"sourcesContent":["import { getCurrentInstance } from 'vue'\n\nexport const useComponentId = (): number => {\n  const instance = getCurrentInstance()\n\n  if(!instance) {\n    throw new Error('useComponentId used out of setup function')\n  }\n\n  return instance.uid\n}","import { InjectionKey } from 'vue'\nimport { RadioInjection } from '@/components/UI/types'\n\nexport const RadioInjectionKey: InjectionKey<RadioInjection> = Symbol('GroupRadio')\n","<template>\n  <div>\n    <label>\n      <input\n        type=\"radio\"\n        :name=\"computedName\"\n        :checked=\"selected\"\n        @change=\"onChange\"\n      >\n      {{ label }}\n    </label>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent } from 'vue'\n\nimport { useComponentId } from '@/composables/componentId'\n\nimport { RadioInjectionKey } from '@/components/UI/symbols'\n\nexport default defineComponent({\n  name: 'Radio',\n  props: {\n    value: {\n      type: [String, Boolean],\n      default: true,\n    },\n\n    label: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Sets component's name attribute\n     */\n    name: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: ['change'],\n\n  setup(props, { emit }) {\n    const RadioGroup = inject(RadioInjectionKey)\n\n    const id = useComponentId()\n    const computedName = computed(() => {\n      if(props.name && !RadioGroup) {\n        return props.name\n      }\n\n      return RadioGroup?.name.value || `radio-${id}`\n    })\n\n    const onChange = () => {\n      emit('change')\n      RadioGroup?.onChange(props.value)\n    }\n\n    const selected = computed(() => RadioGroup?.modelValue.value === props.value)\n\n    return {\n      computedName,\n      onChange,\n      selected,\n    }\n  },\n})\n</script>\n","<template>\n  <div>\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { provide, computed, defineComponent } from 'vue'\n\nimport { useComponentId } from '@/composables/componentId'\n\nimport { RadioInjectionKey } from '@/components/UI/symbols'\n\nexport default defineComponent({\n  name: 'RadioGroup',\n  props: {\n    name: {\n      type: String,\n      default: '',\n    },\n\n    modelValue: {\n      type: [Boolean, String],\n      default: '',\n    },\n  },\n\n  emits: {\n    'update:modelValue': (value: string | boolean) => true,\n  },\n\n  setup(props, { emit }) {\n    const id = useComponentId()\n    const computedName = computed(() => props.name || `radio-group-${id}`)\n\n    const computedModelValue = computed(() => props.modelValue)\n\n    provide(RadioInjectionKey, {\n      name: computedName,\n      modelValue: computedModelValue,\n      onChange(value) {\n        emit('update:modelValue', value)\n      },\n    })\n\n  },\n})\n</script>\n","<template>\n  <RadioGroup v-model=\"value\">\n    {{ label }}\n    <Radio\n      :value=\"true\"\n      label=\"True\"\n    />\n\n    <Radio\n      :value=\"false\"\n      label=\"False\"\n    />\n  </RadioGroup>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { useVModel } from '@vueuse/core'\n\nimport Radio from '@/components/UI/Radio/Radio.vue'\nimport RadioGroup from '@/components/UI/RadioGroup/RadioGroup.vue'\n\nexport default defineComponent({\n  name: 'BooleanSwitch',\n  components: {\n    Radio,\n    RadioGroup,\n  },\n\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: false,\n    },\n\n    label: {\n      type: String,\n      default: null,\n    },\n  },\n\n  setup(props, { emit }) {\n    const value = useVModel(props, 'modelValue', emit)\n\n    return {\n      value,\n    }\n  },\n})\n</script>\n"],"names":["useComponentId","instance","getCurrentInstance","Error","uid","RadioInjectionKey","Symbol","defineComponent","name","props","value","type","String","Boolean","default","label","emits","setup","emit","RadioGroup","inject","id","computedName","computed","onChange","selected","modelValue","computedModelValue","components","Radio","useVModel"],"mappings":"8IAEaA,EAAiB,WACtBC,EAAWC,QAEbD,QACI,IAAIE,MAAM,oDAGXF,EAASG,KCNLC,EAAkDC,OAAO,cCkBtE,MAAeC,EAAgB,CAC7BC,KAAM,QACNC,MAAO,CACLC,MAAO,CACLC,KAAM,CAACC,OAAQC,SACfC,SAAS,GAGXC,MAAO,CACLJ,KAAMC,OACNE,QAAS,IAMXN,KAAM,CACJG,KAAMC,OACNE,QAAS,KAIbE,MAAO,CAAC,UAERC,MAAMR,GAAOS,KAAEA,UACPC,EAAaC,EAAOf,GAEpBgB,EAAKrB,UAgBJ,CACLsB,aAhBmBC,GAAS,IACzBd,EAAMD,OAASW,EACTV,EAAMD,uBAGIA,KAAKE,QAAS,SAASW,MAY1CG,SATe,OACV,qBACOA,SAASf,EAAMC,QAQ3Be,SALeF,GAAS,sBAAkBG,WAAWhB,SAAUD,EAAMC,8QCjD3E,MAAeH,EAAgB,CAC7BC,KAAM,aACNC,MAAO,CACLD,KAAM,CACJG,KAAMC,OACNE,QAAS,IAGXY,WAAY,CACVf,KAAM,CAACE,QAASD,QAChBE,QAAS,KAIbE,MAAO,CACL,oBAAsBN,IAA4B,GAGpDO,MAAMR,GAAOS,KAAEA,UACPG,EAAKrB,IACLsB,EAAeC,GAAS,IAAMd,EAAMD,MAAQ,eAAea,MAE3DM,EAAqBJ,GAAS,IAAMd,EAAMiB,eAExCrB,EAAmB,CACzBG,KAAMc,EACNI,WAAYC,EACZH,SAASd,KACF,oBAAqBA,0FCnBlC,MAAeH,EAAgB,CAC7BC,KAAM,gBACNoB,WAAY,OACVC,aACAV,GAGFV,MAAO,CACLiB,WAAY,CACVf,KAAME,QACNC,SAAS,GAGXC,MAAO,CACLJ,KAAMC,OACNE,QAAS,OAIbG,OAAMR,GAAOS,KAAEA,MAGN,CACLR,MAHYoB,EAAUrB,EAAO,aAAcS"}